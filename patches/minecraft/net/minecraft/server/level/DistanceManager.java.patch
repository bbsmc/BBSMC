--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -34,6 +_,7 @@
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.bukkit.plugin.Plugin;
 import org.slf4j.Logger;
 
 public abstract class DistanceManager {
@@ -44,7 +_,7 @@
    private static final int f_183899_ = 32;
    private static final int f_183900_ = 33;
    final Long2ObjectMap<ObjectSet<ServerPlayer>> f_140760_ = new Long2ObjectOpenHashMap<>();
-   final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> f_140761_ = new Long2ObjectOpenHashMap<>();
+   public final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> f_140761_ = new Long2ObjectOpenHashMap<>();
    private final DistanceManager.ChunkTicketTracker f_140762_ = new DistanceManager.ChunkTicketTracker();
    private final DistanceManager.FixedPlayerDistanceChunkTracker f_140763_ = new DistanceManager.FixedPlayerDistanceChunkTracker(8);
    private final TickingTracker f_183901_ = new TickingTracker();
@@ -58,6 +_,8 @@
    private long f_140771_;
    private int f_183902_ = 10;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected DistanceManager(Executor p_140774_, Executor p_140775_) {
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("player ticket throttler", p_140775_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
@@ -163,6 +_,10 @@
          this.f_140762_.m_140715_(p_140785_, p_140786_.m_9433_(), true);
       }
 
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.m_14246_(4));
+          tickets.m_14253_(ticket);
+      }
    }
 
    void m_140818_(long p_140819_, Ticket<?> p_140820_) {
@@ -175,6 +_,13 @@
       }
 
       this.f_140762_.m_140715_(p_140819_, m_140797_(sortedarrayset), false);
+
+      if (p_140820_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+          if (tickets != null) {
+              tickets.remove(p_140820_);
+          }
+      }
    }
 
    public <T> void m_140792_(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
@@ -187,14 +_,20 @@
    }
 
    public <T> void m_140840_(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-      Ticket<T> ticket = new Ticket<>(p_140841_, 33 - p_140843_, p_140844_);
+      addRegionTicket(p_140841_, p_140842_, p_140843_, p_140844_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140841_, 33 - p_140843_, p_140844_, forceTicks);
       long i = p_140842_.m_45588_();
       this.m_140784_(i, ticket);
       this.f_183901_.m_184151_(i, ticket);
    }
 
    public <T> void m_140849_(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-      Ticket<T> ticket = new Ticket<>(p_140850_, 33 - p_140852_, p_140853_);
+      removeRegionTicket(p_140850_, p_140851_, p_140852_, p_140853_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140850_, 33 - p_140852_, p_140853_, forceTicks);
       long i = p_140851_.m_45588_();
       this.m_140818_(i, ticket);
       this.f_183901_.m_184165_(i, ticket);
@@ -287,6 +_,11 @@
       return this.f_140766_.m_140558_();
    }
 
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
    private void m_143207_(String p_143208_) {
       try {
          FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_));
@@ -352,6 +_,18 @@
 
    public boolean m_201911_() {
       return !this.f_140761_.isEmpty();
+   }
+
+    public boolean addRegionTicketAtDistance(TicketType<Plugin> pluginTicket, ChunkPos chunkPos, int i, Plugin plugin) {
+      return false;
+    }
+
+   public boolean removeRegionTicketAtDistance(TicketType<Plugin> pluginTicket, ChunkPos chunkPos, int i, Plugin plugin) {
+      return false;
+   }
+
+   public void removeAllTicketsFor(TicketType<Plugin> pluginTicket, int i, Plugin plugin) {
+
    }
 
    class ChunkTicketTracker extends ChunkTracker {
