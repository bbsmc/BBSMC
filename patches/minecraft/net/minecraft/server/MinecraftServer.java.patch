--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -10,41 +_,12 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.longs.LongIterator;
-import java.awt.image.BufferedImage;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.Writer;
-import java.lang.management.ManagementFactory;
-import java.lang.management.ThreadInfo;
-import java.lang.management.ThreadMXBean;
-import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.security.KeyPair;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.BooleanSupplier;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+import net.bbsmc.server.BBSMcServer;
+import net.bbsmc.server.core.BukkitInjector;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -58,6 +_,7 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
 import net.minecraft.gametest.framework.GameTestTicker;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
@@ -151,9 +_,55 @@
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.common.MinecraftForge;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.event.world.WorldLoadEvent;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.Writer;
+import java.lang.management.ManagementFactory;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.net.Proxy;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.security.KeyPair;
+import java.util.Arrays;
+import java.util.Base64;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.BooleanSupplier;
+import java.util.function.Consumer;
+import java.util.function.Function;
+
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
    private static final Logger f_129750_ = LogUtils.getLogger();
    public static final String f_195495_ = "vanilla";
@@ -172,8 +_,8 @@
    public static final LevelSettings f_129743_ = new LevelSettings("Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), DataPackConfig.f_45842_);
    private static final long f_177871_ = 50L;
    public static final GameProfile f_195496_ = new GameProfile(Util.f_137441_, "Anonymous Player");
-   protected final LevelStorageSource.LevelStorageAccess f_129744_;
-   protected final PlayerDataStorage f_129745_;
+   public final LevelStorageSource.LevelStorageAccess f_129744_;
+   public final PlayerDataStorage f_129745_;
    private final List<Runnable> f_129752_ = Lists.newArrayList();
    private MetricsRecorder f_177872_ = InactiveMetricsRecorder.f_146153_;
    private ProfilerFiller f_129754_ = this.f_177872_.m_142610_();
@@ -187,14 +_,14 @@
    private MinecraftServer.TimeProfiler f_177876_;
    private boolean f_177877_;
    private final ServerConnectionListener f_129755_;
-   private final ChunkProgressListenerFactory f_129756_;
+   public final ChunkProgressListenerFactory f_129756_;
    private final ServerStatus f_129757_ = new ServerStatus();
    private final RandomSource f_129758_ = RandomSource.m_216327_();
    private final DataFixer f_129759_;
    private String f_129760_;
    private int f_129761_ = -1;
-   private final RegistryAccess.Frozen f_129746_;
-   private final Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
+   public final RegistryAccess.Frozen f_129746_;
+   private Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
    private PlayerList f_129763_;
    private volatile boolean f_129764_ = true;
    private boolean f_129765_;
@@ -217,7 +_,7 @@
    private long f_129718_;
    protected final Services f_236721_;
    private long f_129724_;
-   private final Thread f_129725_;
+   public final Thread f_129725_;
    protected long f_129726_ = Util.m_137550_();
    private long f_129727_;
    private boolean f_129728_;
@@ -230,17 +_,65 @@
    private final FrameTimer f_129735_ = new FrameTimer();
    private boolean f_129736_;
    private float f_129737_;
-   private final Executor f_129738_;
+   public final Executor f_129738_;
    @Nullable
    private String f_129739_;
-   private MinecraftServer.ReloadableResources f_129740_;
+   public MinecraftServer.ReloadableResources f_129740_;
    private final StructureTemplateManager f_236720_;
    protected final WorldData f_129749_;
    private volatile boolean f_195494_;
 
+   // BBSMC start
+   public net.minecraft.world.level.DataPackConfig datapackconfiguration;
+   public DynamicOps<Tag> registryreadops;
+   public org.bukkit.craftbukkit.CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public ConsoleReader reader;
+   public static int currentTick = (int) (System.currentTimeMillis() / 50);
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public net.minecraft.commands.Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+
+   private void initMinecraftServer(OptionSet set, DataPackConfig config, DynamicOps<Tag> ops) {
+      this.options = set;
+      this.datapackconfiguration = config;
+      this.registryreadops = ops;
+   }
+
+   @Override
+   public boolean m_18695_() {
+      return super.m_18695_() || this.m_129918_();
+   }
+
+   public boolean isDebugging() {
+      return false;
+   }
+
+   @Deprecated
+   public static net.minecraft.server.MinecraftServer getServer() {
+      return (org.bukkit.Bukkit.getServer() instanceof org.bukkit.craftbukkit.CraftServer) ? ((org.bukkit.craftbukkit.CraftServer) org.bukkit.Bukkit.getServer()).getServer() : null;
+   }
+
+   public final java.util.concurrent.ExecutorService chatExecutor = java.util.concurrent.Executors.newCachedThreadPool(
+           new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").build());
+
+   private boolean hasStopped = false;
+
+   private final Object stopLock = new Object();
+
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // BBSMC end
+
    public static <S extends MinecraftServer> S m_129872_(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().m_130011_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> {
@@ -258,6 +_,8 @@
 
    public MinecraftServer(Thread p_236723_, LevelStorageSource.LevelStorageAccess p_236724_, PackRepository p_236725_, WorldStem p_236726_, Proxy p_236727_, DataFixer p_236728_, Services p_236729_, ChunkProgressListenerFactory p_236730_) {
       super("Server");
+      // BBSMC - serverSetter
+      this.initMinecraftServer(BBSMcServer.getServerSetter().getOptionSet(), BBSMcServer.getServerSetter().getDataPackConfig(), BBSMcServer.getServerSetter().getDynamicOps());
       this.f_129746_ = p_236726_.f_206894_();
       this.f_129749_ = p_236726_.f_206895_();
       if (!this.f_129749_.m_5961_().m_204655_().m_142003_(LevelStem.f_63971_)) {
@@ -280,6 +_,28 @@
          this.f_236720_ = new StructureTemplateManager(p_236726_.f_206892_(), p_236724_, p_236728_);
          this.f_129725_ = p_236723_;
          this.f_129738_ = Util.m_183991_();
+
+         this.vanillaCommandDispatcher = p_236726_.f_206893_().f_206847_; // CraftBukkit
+         if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            org.bukkit.craftbukkit.Main.useJline = false;
+         }
+         try {
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+         } catch (Throwable e) {
+            try {
+               // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+               System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+               System.setProperty("user.language", "en");
+               Main.useJline = false;
+               reader = new ConsoleReader(System.in, System.out);
+               reader.setExpandEvents(false);
+            } catch (IOException ex) {
+               f_129750_.warn(null, ex);
+            }
+         }
+         Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
       }
    }
 
@@ -317,6 +_,116 @@
    protected void m_7044_() {
    }
 
+   // BBSMC start - bukkit method
+   private ServerLevel worldInit(ServerLevel serverLevel) {
+      var scoreManager = ((CraftServer) Bukkit.getServer()).scoreboardManager;
+      if (scoreManager == null) {
+         scoreManager = new CraftScoreboardManager(MinecraftServer.getServer(), serverLevel.m_6188_());
+         ((CraftServer) Bukkit.getServer()).scoreboardManager = scoreManager;
+      }
+      var generator = serverLevel.getWorld().getGenerator();
+      if (generator != null) {
+         serverLevel.getWorld().getPopulators().addAll(generator.getDefaultPopulators(serverLevel.getWorld()));
+      }
+      Bukkit.getPluginManager().callEvent(new WorldInitEvent(serverLevel.getWorld()));
+      return serverLevel;
+   }
+
+   public void initWorld(ServerLevel serverWorld, ServerLevelData worldInfo, WorldData saveData, WorldGenSettings generatorSettings) {
+      boolean flag = generatorSettings.m_64668_();
+      var generator = serverWorld.getWorld().getGenerator();
+      if (generator != null) {
+         serverWorld.getWorld().getPopulators().addAll(generator.getDefaultPopulators(serverWorld.getWorld()));
+      }
+      WorldBorder worldborder = serverWorld.m_6857_();
+      worldborder.m_61931_(worldInfo.m_5813_());
+      if (!worldInfo.m_6535_()) {
+         try {
+            m_177896_(serverWorld, worldInfo, generatorSettings.m_64660_(), flag);
+            worldInfo.m_5555_(true);
+            if (flag) {
+               this.m_129847_(this.f_129749_);
+            }
+         } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.m_127521_(throwable, "Exception initializing level");
+            try {
+               serverWorld.m_6026_(crashreport);
+            } catch (Throwable throwable2) {
+               // empty catch block
+            }
+            throw new ReportedException(crashreport);
+         }
+         worldInfo.m_5555_(true);
+      }
+   }
+
+   public void prepareLevels(ChunkProgressListener listener, ServerLevel serverWorld) {
+      this.markWorldsDirty();
+      Bukkit.getPluginManager().callEvent(new WorldInitEvent(serverWorld.getWorld()));
+      Bukkit.getPluginManager().callEvent(new WorldLoadEvent(serverWorld.getWorld()));
+      MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(serverWorld));
+      if (!serverWorld.getWorld().getKeepSpawnInMemory()) {
+         return;
+      }
+      this.forceTicks = true;
+      f_129750_.info("Preparing start region for dimension {}", serverWorld.m_46472_().m_135782_());
+      BlockPos blockpos = serverWorld.m_220360_();
+      listener.m_7647_(new ChunkPos(blockpos));
+      ServerChunkCache serverchunkprovider = serverWorld.m_7726_();
+      serverchunkprovider.m_7827_().m_9310_(500);
+      this.f_129726_ = Util.m_137550_();
+      serverchunkprovider.m_8387_(TicketType.f_9442_, new ChunkPos(blockpos), 11, Unit.INSTANCE);
+
+      while (serverchunkprovider.m_8427_() < 441) {
+         this.executeModerately();
+      }
+
+      this.executeModerately();
+
+      ForcedChunksSavedData forcedchunkssavedata = serverWorld.m_8895_().m_164858_(ForcedChunksSavedData::m_151483_, "chunks");
+      if (forcedchunkssavedata != null) {
+         LongIterator longiterator = forcedchunkssavedata.m_46116_().iterator();
+
+         while (longiterator.hasNext()) {
+            long i = longiterator.nextLong();
+            ChunkPos chunkpos = new ChunkPos(i);
+            serverWorld.m_7726_().m_6692_(chunkpos, true);
+         }
+         net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverWorld, forcedchunkssavedata);
+      }
+      this.executeModerately();
+      listener.m_7646_();
+      serverchunkprovider.m_7827_().m_9310_(5);
+      // this.updateMobSpawningFlags();
+      serverWorld.m_46703_(this.m_7004_(), this.m_6998_());
+      this.forceTicks = false;
+   }
+
+   private void executeModerately() {
+      this.m_18699_();
+      this.drainQueuedTasks();
+      java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
+   }
+
+   public void drainQueuedTasks() {
+      while (!processQueue.isEmpty()) {
+         processQueue.remove().run();
+      }
+   }
+
+   public void addLevel(net.minecraft.server.level.ServerLevel level) {
+      Map<ResourceKey<Level>, ServerLevel> oldLevels = this.f_129762_;
+      Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(oldLevels);
+      newLevels.put(level.m_46472_(), level);
+      this.f_129762_ = Collections.unmodifiableMap(newLevels);
+   }
+
+   public void removeLevel(net.minecraft.server.level.ServerLevel level) {
+      Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(this.f_129762_);
+      newLevels.remove(level.m_46472_());
+      this.f_129762_ = Collections.unmodifiableMap(newLevels);
+   }
+
    protected void m_129815_(ChunkProgressListener p_129816_) {
       ServerLevelData serverleveldata = this.f_129749_.m_5996_();
       WorldGenSettings worldgensettings = this.f_129749_.m_5961_();
@@ -327,11 +_,15 @@
       Registry<LevelStem> registry = worldgensettings.m_204655_();
       LevelStem levelstem = registry.m_6246_(LevelStem.f_63971_);
       ServerLevel serverlevel = new ServerLevel(this, this.f_129738_, this.f_129744_, serverleveldata, Level.f_46428_, levelstem, p_129816_, flag, j, list, true);
-      this.f_129762_.put(Level.f_46428_, serverlevel);
+      // BBSMC start
+      BukkitInjector.registerEnvironment(registry);
+      this.f_129762_.put(Level.f_46428_, this.worldInit(serverlevel));
+      // BBSMC end
       DimensionDataStorage dimensiondatastorage = serverlevel.m_8895_();
       this.m_129841_(dimensiondatastorage);
       this.f_129732_ = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.m_6857_();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(Level.f_46428_)));
       if (!serverleveldata.m_6535_()) {
          try {
             m_177896_(serverlevel, serverleveldata, worldgensettings.m_64660_(), flag);
@@ -365,7 +_,8 @@
             DerivedLevelData derivedleveldata = new DerivedLevelData(this.f_129749_, serverleveldata);
             ServerLevel serverlevel1 = new ServerLevel(this, this.f_129738_, this.f_129744_, derivedleveldata, resourcekey1, entry.getValue(), p_129816_, flag, j, ImmutableList.of(), false);
             worldborder.m_61929_(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.m_6857_()));
-            this.f_129762_.put(resourcekey1, serverlevel1);
+            this.f_129762_.put(resourcekey1, this.worldInit(serverlevel1));
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(resourcekey)));
          }
       }
 
@@ -377,7 +_,23 @@
          p_177898_.m_7250_(BlockPos.f_121853_.m_6630_(80), 0.0F);
       } else {
          ServerChunkCache serverchunkcache = p_177897_.m_7726_();
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(serverchunkcache.m_214994_().m_224579_().m_183230_());
+         // CraftBukkit start
+         if (p_177897_.generator != null) {
+            Random rand = new Random(p_177897_.m_7328_());
+            org.bukkit.Location spawn = p_177897_.generator.getFixedSpawnLocation(p_177897_.getWorld(), rand);
+
+            if (spawn != null) {
+               if (spawn.getWorld() != p_177897_.getWorld()) {
+                  throw new IllegalStateException("Cannot set spawn point for " + p_177898_.m_5462_() + " to be in another world (" + spawn.getWorld().getName() + ")");
+               } else {
+                  p_177898_.m_7250_(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
+                  return;
+               }
+            }
+         }
+         // CraftBukkit end
          int i = serverchunkcache.m_8481_().m_142051_(p_177897_);
          if (i < p_177897_.m_141937_()) {
             BlockPos blockpos = chunkpos.m_45615_();
@@ -457,14 +_,14 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.m_7726_().m_6692_(chunkpos, true);
             }
+            net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
-      this.f_129726_ = Util.m_137550_() + 10L;
-      this.m_130012_();
+      this.executeModerately(); // BBSMC
       p_129941_.m_7646_();
       serverchunkcache.m_7827_().m_9310_(5);
-      this.m_129962_();
+      serverlevel.m_46703_(this.m_7004_(), this.m_6998_());
    }
 
    public GameType m_130008_() {
@@ -498,6 +_,15 @@
       serverleveldata.m_7831_(serverlevel2.m_6857_().m_61970_());
       this.f_129749_.m_5917_(this.m_129901_().m_136307_());
       this.f_129744_.m_78290_(this.m_206579_(), this.f_129749_, this.m_6846_().m_6960_());
+      // BBSMC start - save bukkit world
+      for (ServerLevel world : this.f_129762_.values()) {
+         if (world.convertable != this.f_129744_) {
+            world.worldDataServer.m_7831_(world.m_6857_().m_61970_());
+            world.worldDataServer.m_5917_(this.m_129901_().m_136307_());
+            world.convertable.m_78287_(this.f_129746_, world.worldDataServer);
+         }
+      }
+      // BBSMC end
       if (p_129887_) {
          for(ServerLevel serverlevel1 : this.m_129785_()) {
             f_129750_.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)serverlevel1.m_7726_().f_8325_.m_182285_());
@@ -527,11 +_,26 @@
    }
 
    public void m_7041_() {
+      if (m_130010_() && m_6982_()) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
+
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(stopLock) {
+         if (hasStopped) return;
+         hasStopped = true;
+      }
+      // CraftBukkit end
+
       if (this.f_177872_.m_142763_()) {
          this.m_236737_();
       }
 
       f_129750_.info("Stopping server");
+      // CraftBukkit start
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
+      // CraftBukkit end
+
       if (this.m_129919_() != null) {
          this.m_129919_().m_9718_();
       }
@@ -541,6 +_,7 @@
          f_129750_.info("Saving players");
          this.f_129763_.m_11302_();
          this.f_129763_.m_11313_();
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
       }
 
       f_129750_.info("Saving worlds");
@@ -571,6 +_,7 @@
       for(ServerLevel serverlevel2 : this.m_129785_()) {
          if (serverlevel2 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                f_129750_.error("Exception closing the level", (Throwable)ioexception1);
@@ -619,6 +_,7 @@
             throw new IllegalStateException("Failed to initialize server");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
          this.f_129726_ = Util.m_137550_();
          this.f_129757_.m_134908_(Component.m_237113_(this.f_129709_));
          this.f_129757_.m_134912_(new ServerStatus.Version(SharedConstants.m_183709_().getName(), SharedConstants.m_183709_().getProtocolVersion()));
@@ -628,9 +_,11 @@
 
          while(this.f_129764_) {
             long i = Util.m_137550_() - this.f_129726_;
-            if (i > 2000L && this.f_129726_ - this.f_129718_ >= 15000L) {
+            if (i > 5000L && this.f_129726_ - this.f_129718_ >= 30000L) { // BBSMC
                long j = i / 50L;
-               f_129750_.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+               if (server.getWarnOnOverload()) {
+                  f_129750_.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+               }
                this.f_129726_ += j * 50L;
                this.f_129718_ = this.f_129726_;
             }
@@ -640,6 +_,7 @@
                this.f_177876_ = new MinecraftServer.TimeProfiler(Util.m_137569_(), this.f_129766_);
             }
 
+            MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
             this.f_129726_ += 50L;
             this.m_177945_();
             this.f_129754_.m_6180_("tick");
@@ -653,6 +_,8 @@
             this.f_129717_ = true;
             JvmProfiler.f_185340_.m_183597_(this.f_129737_);
          }
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
       } catch (Throwable throwable1) {
          f_129750_.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport = m_206568_(throwable1);
@@ -664,6 +_,7 @@
             f_129750_.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
          this.m_7268_(crashreport);
       } finally {
          try {
@@ -676,6 +_,7 @@
                this.f_236721_.f_214336_().m_196559_();
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.m_6988_();
          }
 
@@ -706,7 +_,7 @@
    }
 
    private boolean m_129960_() {
-      return this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
+      return this.forceTicks || this.m_18767_() || this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
    }
 
    protected void m_130012_() {
@@ -789,6 +_,7 @@
 
    public void m_5705_(BooleanSupplier p_129871_) {
       long i = Util.m_137569_();
+      net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
       ++this.f_129766_;
       this.m_5703_(p_129871_);
       if (i - this.f_129724_ >= 5000000000L) {
@@ -810,9 +_,10 @@
             Collections.shuffle(Arrays.asList(agameprofile));
             this.f_129757_.m_134914_().m_134924_(agameprofile);
          }
+         this.f_129757_.invalidateJson();
       }
 
-      if (this.f_129766_ % 6000 == 0) {
+      if (autosavePeriod > 0 && this.f_129766_ % autosavePeriod == 0) { // BBSMC
          f_129750_.debug("Autosave started");
          this.f_129754_.m_6180_("save");
          this.m_195514_(true, false, false);
@@ -826,24 +_,34 @@
       long i1 = Util.m_137569_();
       this.f_129735_.m_13755_(i1 - i);
       this.f_129754_.m_7238_();
+      net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
    }
 
    public void m_5703_(BooleanSupplier p_129954_) {
+      this.server.getScheduler().mainThreadHeartbeat(this.f_129766_); // CraftBukkit
       this.f_129754_.m_6180_("commandFunctions");
       this.m_129890_().m_136128_();
       this.f_129754_.m_6182_("levels");
 
-      for(ServerLevel serverlevel : this.m_129785_()) {
-         this.f_129754_.m_6521_(() -> {
-            return serverlevel + " " + serverlevel.m_46472_().m_135782_();
-         });
-         if (this.f_129766_ % 20 == 0) {
-            this.f_129754_.m_6180_("timeSync");
-            this.f_129763_.m_11270_(new ClientboundSetTimePacket(serverlevel.m_46467_(), serverlevel.m_46468_(), serverlevel.m_46469_().m_46207_(GameRules.f_46140_)), serverlevel.m_46472_());
-            this.f_129754_.m_7238_();
+      // CraftBukkit start
+      // Run tasks that are waiting on processing
+      while (!processQueue.isEmpty()) {
+         processQueue.remove().run();
+      }
+
+      // Send time updates to everyone, it will get the right time from the world the player is in.
+      if (this.f_129766_ % 20 == 0) {
+         for (ServerPlayer serverPlayer : this.m_6846_().f_11196_) {
+            serverPlayer.f_8906_.m_9829_(new ClientboundSetTimePacket(serverPlayer.f_19853_.m_46467_(), serverPlayer.getPlayerTime(), serverPlayer.f_19853_.m_46469_().m_46207_(GameRules.f_46140_))); // Add support for per player time
          }
+      }
+
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.m_137569_();
+         this.f_129754_.m_6521_(() -> serverlevel + " " + serverlevel.m_46472_().m_135782_());
 
          this.f_129754_.m_6180_("tick");
+         net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
          try {
             serverlevel.m_8793_(p_129954_);
@@ -852,16 +_,18 @@
             serverlevel.m_6026_(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
          this.f_129754_.m_7238_();
          this.f_129754_.m_7238_();
+         perWorldTickTimes.computeIfAbsent(serverlevel.m_46472_(), k -> new long[100])[this.f_129766_ % 100] = Util.m_137569_() - tickStart;
       }
 
       this.f_129754_.m_6182_("connection");
       this.m_129919_().m_9721_();
       this.f_129754_.m_6182_("players");
       this.f_129763_.m_11288_();
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          GameTestTicker.f_177648_.m_127790_();
       }
 
@@ -929,7 +_,7 @@
 
    @DontObfuscate
    public String m_130001_() {
-      return "vanilla";
+      return net.minecraftforge.internal.BrandingControl.getServerBranding();
    }
 
    public SystemReport m_177935_(SystemReport p_177936_) {
@@ -1121,7 +_,7 @@
    }
 
    public boolean m_214000_() {
-      return false;
+      return net.minecraftforge.common.ForgeMod.isServerChatPreviewEnabled();
    }
 
    public boolean m_129918_() {
@@ -1280,6 +_,7 @@
       }).thenAcceptAsync((p_212919_) -> {
          this.f_129740_.close();
          this.f_129740_ = p_212919_;
+         this.server.syncCommands(); // SPIGOT-5884: Lost on reload
          this.f_129730_.m_10509_(p_129862_);
          this.f_129749_.m_6645_(m_129817_(this.f_129730_));
          this.f_129740_.f_206585_.m_206868_(this.m_206579_());
@@ -1287,6 +_,7 @@
          this.m_6846_().m_11315_();
          this.f_129734_.m_136120_(this.f_129740_.f_206585_.m_206860_());
          this.f_236720_.m_230370_(this.f_129740_.f_206584_);
+         this.m_6846_().m_11314_().forEach(this.m_6846_()::m_11289_); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.m_18695_()) {
          this.m_18701_(completablefuture::isDone);
@@ -1296,10 +_,13 @@
    }
 
    public static DataPackConfig m_129819_(PackRepository p_129820_, DataPackConfig p_129821_, boolean p_129822_) {
+      net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_129820_, net.minecraftforge.server.ServerLifecycleHooks::buildPackFinder);
       p_129820_.m_10506_();
+      DataPackConfig.f_45842_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_129821_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_129822_) {
-         p_129820_.m_10509_(Collections.singleton("vanilla"));
-         return DataPackConfig.f_45842_;
+         p_129820_.m_10509_(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackConfig(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1450,6 +_,31 @@
 
    public abstract boolean m_7779_(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.f_129762_;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.f_129762_.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void m_142116_(Path p_177911_) throws IOException {
    }
 
@@ -1710,6 +_,10 @@
       return this.f_129749_;
    }
 
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return f_129740_;
+   }
+
    public RegistryAccess.Frozen m_206579_() {
       return this.f_129746_;
    }
@@ -1767,8 +_,27 @@
 
    }
 
+   @SuppressWarnings("deprecation")
    public ChatDecorator m_236742_() {
-      return ChatDecorator.f_236947_;
+      return (entityplayer, ichatbasecomponent) -> {
+         // SPIGOT-7127: Console /say and similar
+         if (entityplayer == null) {
+            return CompletableFuture.completedFuture(ichatbasecomponent);
+         }
+
+         return CompletableFuture.supplyAsync(() -> {
+            AsyncPlayerChatPreviewEvent event = new AsyncPlayerChatPreviewEvent(true, entityplayer.getBukkitEntity(), CraftChatMessage.fromComponent(ichatbasecomponent), new LazyPlayerSet(this));
+            String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+            this.server.getPluginManager().callEvent(event);
+
+            if (originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+               return ichatbasecomponent;
+            }
+
+            return CraftChatMessage.fromStringOrNull(String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage()));
+         }, chatExecutor);
+      };
+      // CraftBukkit end
    }
 
    public static record ReloadableResources(CloseableResourceManager f_206584_, ReloadableServerResources f_206585_) implements AutoCloseable {
